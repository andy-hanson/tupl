if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './private/util'], function (exports, _privateUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports.default = (name, superType, doc, namesTypes, protoProps, tuplProps) => {
		// TODO:ES6 Optional arguments
		if (protoProps === undefined) protoProps = {};
		if (tuplProps === undefined) tuplProps = {};
		let props = [];
		(0, _privateUtil.assert)(namesTypes.length % 2 === 0);
		for (let i = 0; i < namesTypes.length; i = i + 2) props.push({ name: namesTypes[i], type: namesTypes[i + 1] });
		let args = props.map(_ => _.name).join(', ');

		let body = `return function ${ name }(${ args }) {
	if (!(this instanceof ${ name }))
		return new ${ name }(${ args });
`;

		props.forEach(_ref => {
			let name = _ref.name;
			return body = body + `this.${ name } = ${ name }; if (this.${ name } === undefined) this.${ name } = null;\n\t`;
		});
		body = body + 'this.postConstruct()\n}';
		const type = Function(body)();
		const prototypeDefaults = {
			constructor: type,
			// Default is to do nothing. May be overridden.
			postConstruct() {},
			toJSON() {
				const obj = {};
				obj.type = this.type;
				// Sort to make JSON rendering deterministic.
				Object.keys(this).sort().forEach(key => {
					obj[key] = this[key];
				});
				return obj;
			},
			// Don't use JSON.stringify because we want other things below this to use their toString().
			toString() {
				return inspect(this);
			}
		};
		type.prototype = (0, _privateUtil.createObject)(superType.prototype, prototypeDefaults, protoProps);
		const defaultProps = {
			doc,
			props,
			isTuple: true,
			toString() {
				return this.name;
			}
		};
		(0, _privateUtil.assignProperties)(type, defaultProps, tuplProps);
		return type;
	};

	const abstract = (name, superType, doc, protoProps, abstractProps) => {
		// TODO:ES6 Optional arguments
		if (protoProps === undefined) protoProps = {};
		if (abstractProps === undefined) abstractProps = {};
		const type = Function(`return function ${ name }() { throw new Error("${ name } is an abstract type.") }`)();
		Object.assign(type.prototype, protoProps);
		const defaultProps = {
			doc,
			prototype: Object.create(superType.prototype),
			toString() {
				return name;
			}
		};
		return Object.assign(type, defaultProps, abstractProps);
	};

	exports.abstract = abstract;
	const show = _ => {
		if (_ instanceof Array) {
			const parts = _.map(em => indent(show(em))).join(',\n\t');
			return `[\n\t${ parts }\n]`;
		} else if (_ === null) return 'null';else if (typeof _ === 'string') return `"${ _ }"`;else return _.toString();
	};

	const inspect = obj => {
		const type = obj.constructor;
		const props = type.props.map(_ref2 => {
			let name = _ref2.name;
			return '\n\t' + indent(show(obj[name]));
		}).join(',');
		return `${ type }(${ props })`;
	};

	const indent = str => str.replace(/\n/g, '\n\t');
});
//# sourceMappingURL=data:application/json;base64,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LEVBQUMsQ0FBQyxDQUFDLENBQUEsS0FFZixPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtFQUNwQixDQUFBOztBQUVELE9BQU0sT0FBTyxHQUFHLEdBQUcsSUFBSTtBQUN0QixRQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFBO0FBQzVCLFFBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEFBQUMsS0FBUTtPQUFOLElBQUksR0FBTixLQUFRLENBQU4sSUFBSTtVQUFPLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUN0RixTQUFPLENBQUMsR0FBRSxJQUFJLEVBQUMsQ0FBQyxHQUFFLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQTtFQUMxQixDQUFBOztBQUVELE9BQU0sTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQSIsImZpbGUiOiJ0dXBsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0LCBhc3NpZ25Qcm9wZXJ0aWVzLCBjcmVhdGVPYmplY3QgfSBmcm9tICcuL3ByaXZhdGUvdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgKG5hbWUsIHN1cGVyVHlwZSwgZG9jLCBuYW1lc1R5cGVzLCBwcm90b1Byb3BzLCB0dXBsUHJvcHMpID0+IHtcblx0Ly8gVE9ETzpFUzYgT3B0aW9uYWwgYXJndW1lbnRzXG5cdGlmIChwcm90b1Byb3BzID09PSB1bmRlZmluZWQpIHByb3RvUHJvcHMgPSB7IH1cblx0aWYgKHR1cGxQcm9wcyA9PT0gdW5kZWZpbmVkKSB0dXBsUHJvcHMgPSB7IH1cblx0bGV0IHByb3BzID0gWyBdXG5cdGFzc2VydChuYW1lc1R5cGVzLmxlbmd0aCAlIDIgPT09IDApXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNUeXBlcy5sZW5ndGg7IGkgPSBpICsgMilcblx0XHRwcm9wcy5wdXNoKHsgbmFtZTogbmFtZXNUeXBlc1tpXSwgdHlwZTogbmFtZXNUeXBlc1tpICsgMV0gfSlcblx0bGV0IGFyZ3MgPSBwcm9wcy5tYXAoXyA9PiBfLm5hbWUpLmpvaW4oJywgJylcblxuXHRsZXQgYm9keSA9IGByZXR1cm4gZnVuY3Rpb24gJHtuYW1lfSgke2FyZ3N9KSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiAke25hbWV9KSlcblx0XHRyZXR1cm4gbmV3ICR7bmFtZX0oJHthcmdzfSk7XG5gXG5cblx0cHJvcHMuZm9yRWFjaCgoeyBuYW1lIH0pID0+XG5cdFx0Ym9keSA9IGJvZHkgK1xuXHRcdFx0YHRoaXMuJHtuYW1lfSA9ICR7bmFtZX07IGlmICh0aGlzLiR7bmFtZX0gPT09IHVuZGVmaW5lZCkgdGhpcy4ke25hbWV9ID0gbnVsbDtcXG5cXHRgKVxuXHRib2R5ID0gYm9keSArICd0aGlzLnBvc3RDb25zdHJ1Y3QoKVxcbn0nXG5cdGNvbnN0IHR5cGUgPSBGdW5jdGlvbihib2R5KSgpXG5cdGNvbnN0IHByb3RvdHlwZURlZmF1bHRzID0ge1xuXHRcdGNvbnN0cnVjdG9yOiB0eXBlLFxuXHRcdC8vIERlZmF1bHQgaXMgdG8gZG8gbm90aGluZy4gTWF5IGJlIG92ZXJyaWRkZW4uXG5cdFx0cG9zdENvbnN0cnVjdCgpIHsgfSxcblx0XHR0b0pTT04oKSB7XG5cdFx0XHRjb25zdCBvYmogPSB7IH1cblx0XHRcdG9iai50eXBlID0gdGhpcy50eXBlXG5cdFx0XHQvLyBTb3J0IHRvIG1ha2UgSlNPTiByZW5kZXJpbmcgZGV0ZXJtaW5pc3RpYy5cblx0XHRcdE9iamVjdC5rZXlzKHRoaXMpLnNvcnQoKS5mb3JFYWNoKGtleSA9PiB7IG9ialtrZXldID0gdGhpc1trZXldIH0pXG5cdFx0XHRyZXR1cm4gb2JqXG5cdFx0fSxcblx0XHQvLyBEb24ndCB1c2UgSlNPTi5zdHJpbmdpZnkgYmVjYXVzZSB3ZSB3YW50IG90aGVyIHRoaW5ncyBiZWxvdyB0aGlzIHRvIHVzZSB0aGVpciB0b1N0cmluZygpLlxuXHRcdHRvU3RyaW5nKCkgeyByZXR1cm4gaW5zcGVjdCh0aGlzKSB9XG5cdH1cblx0dHlwZS5wcm90b3R5cGUgPSBjcmVhdGVPYmplY3Qoc3VwZXJUeXBlLnByb3RvdHlwZSwgcHJvdG90eXBlRGVmYXVsdHMsIHByb3RvUHJvcHMpXG5cdGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcblx0XHRkb2MsXG5cdFx0cHJvcHMsXG5cdFx0aXNUdXBsZTogdHJ1ZSxcblx0XHR0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMubmFtZSB9XG5cdH1cblx0YXNzaWduUHJvcGVydGllcyh0eXBlLCBkZWZhdWx0UHJvcHMsIHR1cGxQcm9wcylcblx0cmV0dXJuIHR5cGVcbn1cblxuZXhwb3J0IGNvbnN0IGFic3RyYWN0ID0gKG5hbWUsIHN1cGVyVHlwZSwgZG9jLCBwcm90b1Byb3BzLCBhYnN0cmFjdFByb3BzKSA9PiB7XG5cdC8vIFRPRE86RVM2IE9wdGlvbmFsIGFyZ3VtZW50c1xuXHRpZiAocHJvdG9Qcm9wcyA9PT0gdW5kZWZpbmVkKSBwcm90b1Byb3BzID0geyB9XG5cdGlmIChhYnN0cmFjdFByb3BzID09PSB1bmRlZmluZWQpIGFic3RyYWN0UHJvcHMgPSB7IH1cblx0Y29uc3QgdHlwZSA9IEZ1bmN0aW9uKFxuXHRcdGByZXR1cm4gZnVuY3Rpb24gJHtuYW1lfSgpIHsgdGhyb3cgbmV3IEVycm9yKFwiJHtuYW1lfSBpcyBhbiBhYnN0cmFjdCB0eXBlLlwiKSB9YFxuXHRcdCkoKVxuXHRPYmplY3QuYXNzaWduKHR5cGUucHJvdG90eXBlLCBwcm90b1Byb3BzKVxuXHRjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG5cdFx0ZG9jLFxuXHRcdHByb3RvdHlwZTogT2JqZWN0LmNyZWF0ZShzdXBlclR5cGUucHJvdG90eXBlKSxcblx0XHR0b1N0cmluZygpIHsgcmV0dXJuIG5hbWUgfVxuXHR9XG5cdHJldHVybiBPYmplY3QuYXNzaWduKHR5cGUsIGRlZmF1bHRQcm9wcywgYWJzdHJhY3RQcm9wcylcbn1cblxuY29uc3Qgc2hvdyA9IF8gPT4ge1xuXHRpZiAoXyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0Y29uc3QgcGFydHMgPSBfLm1hcChlbSA9PiBpbmRlbnQoc2hvdyhlbSkpKS5qb2luKCcsXFxuXFx0Jylcblx0XHRyZXR1cm4gYFtcXG5cXHQke3BhcnRzfVxcbl1gXG5cdH0gZWxzZSBpZiAoXyA9PT0gbnVsbClcblx0XHRyZXR1cm4gJ251bGwnXG5cdGVsc2UgaWYgKHR5cGVvZiBfID09PSAnc3RyaW5nJylcblx0XHRyZXR1cm4gYFwiJHtffVwiYFxuXHRlbHNlXG5cdFx0cmV0dXJuIF8udG9TdHJpbmcoKVxufVxuXG5jb25zdCBpbnNwZWN0ID0gb2JqID0+IHtcblx0Y29uc3QgdHlwZSA9IG9iai5jb25zdHJ1Y3RvclxuXHRjb25zdCBwcm9wcyA9IHR5cGUucHJvcHMubWFwKCh7IG5hbWUgfSkgPT4gJ1xcblxcdCcgKyBpbmRlbnQoc2hvdyhvYmpbbmFtZV0pKSkuam9pbignLCcpXG5cdHJldHVybiBgJHt0eXBlfSgke3Byb3BzfSlgXG59XG5cbmNvbnN0IGluZGVudCA9IHN0ciA9PiBzdHIucmVwbGFjZSgvXFxuL2csICdcXG5cXHQnKVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=